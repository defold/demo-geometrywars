require "level.level_util"

function random_spawn(self, enemy_factory)
	local min, max = level_get_aabb()
	local ext = max - min
	local p = min + vmath.vector3(math.random() * ext.x, math.random() * ext.y, 0)
	factory.create(enemy_factory, p)
end

function burst_spawn(self, enemy_factory)
	for k,v in pairs(self.markers) do
		factory.create(enemy_factory, v)
	end
end

function black_hole_spawn(self, enemy_factory)
	local min, max = level_get_aabb()
	local center = min + 0.5 * (max - min)
	for k,v in pairs(self.markers) do
		local p = center + 0.5 * (v - center)
		factory.create(enemy_factory, p)
	end
end

function init(self)
	local chaser = msg.url("#chaser_factory")
	local swirler = msg.url("#swirler_factory")
	local roamer = msg.url("#roamer_factory")
	local black_hole = msg.url("#black_hole_factory")
	self.markers = {[go.get_id("ne_marker")] = vmath.vector3(), [go.get_id("se_marker")] = vmath.vector3(),
		[go.get_id("nw_marker")] = vmath.vector3(), [go.get_id("sw_marker")] = vmath.vector3()}
	for k,v in pairs(self.markers) do
		msg.post(k, "request_transform")
	end
	self.wave_timer = 0
	self.waves = {
		--duration, rate, factory, callback 
		{2, 0, nil, nil},
		{5, 0.5, roamer, random_spawn},
		{2, 0, nil, nil},
		{2, 4, chaser, burst_spawn},
		{2, 0, nil, nil},
		{5, 0.5, roamer, random_spawn},
		{2, 0, nil, nil},
		{2.5, 4, swirler, burst_spawn},
		{4.2, 0, nil, nil},
		{0.1, 1, black_hole, black_hole_spawn},
		{2, 0, nil, nil},
		{8, 12, chaser, random_spawn},
		{4, 0, nil, nil},
		{2.5, 4, swirler, burst_spawn},
		{2, 0, nil, nil},
		{2, 4, chaser, burst_spawn},
		{2, 0, nil, nil},
		{2.5, 4, swirler, burst_spawn},
		{2, 0, nil, nil},
		{2, 4, chaser, burst_spawn},
	}
	self.wave_index = 0
	self.spawn_timer = 0
	self.spawn_delay = 0 
end

function update(self, dt)
	self.wave_timer = self.wave_timer - dt
	if self.wave_timer < 0 then
		self.wave_index = self.wave_index + 1
		if self.wave_index > #self.waves then
			self.wave_index = 1
		end
		local wave = self.waves[self.wave_index]
		self.wave_timer = wave[1]
		self.spawn_delay = 1/wave[2]
		self.spawn_timer = 0
	end
	local wave = self.waves[self.wave_index]
	self.spawn_timer = self.spawn_timer - dt
	while self.spawn_timer < 0 do
		self.spawn_timer = self.spawn_timer + self.spawn_delay
		if wave[4] then
			wave[4](self, wave[3])
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("transform_response") then
		self.markers[sender.path] = message.world_position
	end
end

function on_input(self, action_id, action)
    -- Add input-handling code here
    -- Remove this function if not needed
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
