
local LIGHT_SIZE = 512

local function dup_table(t)
    local nt = {}
    for index, value in pairs(t) do
        nt[index] = value  
    end    
    return nt
end

function init(self)
    self.tile_pred = render.predicate({"tile"})
    self.gui_pred = render.predicate({"gui"})
    self.text_pred = render.predicate({"text"})
    self.particle_pred = render.predicate({"particle"})
    self.particle_light_pred = render.predicate({"particle_light"})
    self.grid_pred = render.predicate({"grid"})
    self.bloom_pred = render.predicate({"bloom"})
    self.blur_pred = render.predicate({"blur"})
    self.light_pred = render.predicate({"light"})
    self.light_mask_pred = render.predicate({"light_mask"})
    self.quad_pred = render.predicate({"quad"})

    self.clear_color = vmath.vector4(0, 0, 0, 0)
    self.clear_color.x = sys.get_config("render.clear_color_red", 0)
    self.clear_color.y = sys.get_config("render.clear_color_green", 0)
    self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
    self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

    self.view = vmath.matrix4()

    local template = { format = render.FORMAT_RGB,
                       width = render.get_window_width(),
                       height = render.get_window_height(),
                       min_filter = render.FILTER_LINEAR,
                       mag_filter = render.FILTER_LINEAR,
                       u_wrap = render.WRAP_CLAMP,
                       v_wrap = render.WRAP_CLAMP }
    

    local rt_params = dup_table(template)
    rt_params.format = render.FORMAT_RGBA
    local rt_params_depth = dup_table(template)
    rt_params_depth.format = render.FORMAT_DEPTH
    self.rt = render.render_target("rt", {[render.BUFFER_COLOR_BIT] = rt_params, [render.BUFFER_DEPTH_BIT] = rt_params_depth})
    
    local blur_params = dup_table(template)
    -- TODO: RGB?
    blur_params.format = render.FORMAT_RGBA
    self.blur_rt = render.render_target("blur_rt", {[render.BUFFER_COLOR_BIT] = blur_params})
       
    local light_params = dup_table(template)
    -- TODO: RGB?
    light_params.width = LIGHT_SIZE
    light_params.height = LIGHT_SIZE
    light_params.format = render.FORMAT_RGBA
    self.light_rt = render.render_target("light_rt", {[render.BUFFER_COLOR_BIT] = light_params})
    
    self.postfx_constants = render.constant_buffer()    
    self.postfx_constants.params = vmath.vector4( 15.0 / render.get_window_width(), 0, 0, 0)
end

function update(self)
    render.enable_render_target(self.light_rt)
    render.set_viewport(0, 0, LIGHT_SIZE, LIGHT_SIZE)
    render.enable_state(render.STATE_BLEND)
    
    render.set_projection(vmath.matrix4_orthographic(0, render.get_width(), 0, render.get_height(), -1000, 1000))
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1})
    render.draw(self.light_mask_pred)
    render.draw(self.particle_light_pred)
    
    render.disable_render_target(self.light_rt)

    render.enable_render_target(self.rt)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1})

    render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())
    render.set_view(self.view)

    render.set_depth_mask(false)
    render.disable_state(render.STATE_DEPTH_TEST)
    render.enable_state(render.STATE_BLEND)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.disable_state(render.STATE_CULL_FACE)

    render.set_projection(vmath.matrix4_orthographic(0, render.get_width(), 0, render.get_height(), -1000, 1000))

    render.draw(self.grid_pred)
    
    render.set_view(vmath.matrix4())
    render.set_projection(vmath.matrix4())
    render.enable_material("light")
    render.enable_texture(0, self.light_rt, render.BUFFER_COLOR_BIT)
    render.set_blend_func(render.BLEND_ZERO, render.BLEND_SRC_COLOR)
    --render.set_blend_func(render.BLEND_ONE, render.BLEND_ONE)
    
    render.draw(self.quad_pred)
    render.disable_texture(0, self.light_rt)
    render.disable_material()
    render.set_view(self.view)
    render.set_projection(vmath.matrix4_orthographic(0, render.get_width(), 0, render.get_height(), -1000, 1000))
    
    render.draw(self.tile_pred)
    render.draw(self.particle_pred)
    render.disable_render_target(self.rt)    
    
    -- postfx
    render.disable_state(render.STATE_BLEND)
    render.set_view(vmath.matrix4())
    render.set_projection(vmath.matrix4())    
   
    render.enable_render_target(self.blur_rt)
    render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1})

    render.enable_texture(0, self.rt, render.BUFFER_COLOR_BIT)    
    render.draw(self.blur_pred, self.postfx_constants)
    render.disable_texture(0, self.rt)
    render.disable_render_target(self.rt)    
   
    render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1})

    render.enable_texture(0, self.blur_rt, render.BUFFER_COLOR_BIT)    
    render.enable_texture(1, self.rt, render.BUFFER_COLOR_BIT)
    
    render.draw(self.bloom_pred)

    render.disable_texture(0, self.blur_rt)
    render.disable_texture(1, self.rt)    
    
    render.set_view(vmath.matrix4())
    render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))
    render.draw_debug3d()

    render.draw(self.gui_pred)
    render.draw(self.text_pred)

    render.set_depth_mask(false)
    render.draw_debug2d()       
end

function on_message(self, message_id, message)
    if message_id == hash("clear_color") then
        self.clear_color = message.color
    elseif message_id == hash("set_view_projection") then
        self.view = message.view
    end
end
